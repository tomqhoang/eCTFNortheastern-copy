#!/usr/bin/env python

"""
Bootloader Build Tool

This tool is responsible for building the bootloader from source and
copying the build outputs into the host tools directory for programming.
"""

import argparse
import json
import os
import subprocess
import sys

from Crypto import Random
from intelhex import IntelHex

# Define the directory where the bootloader lives.
BOOTLOADER_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'bootloader'))

def generate_readback_password():
    """
    Generate secret password for readback tool and store to secret file.
    """
    random_password = Random.new().read(32).encode('hex')

    # Write password to secret file in this directory
    with open('secret_build_output.txt', 'wb+') as secret_build_output:
        data = {'password' : random_password}
        data = json.dumps(data)
        secret_build_output.write(data)
    return random_password

def make(password=None):
    """
    Build the bootloader from source.
    """
    if password is not None:
        status = subprocess.call('make PASSWORD="%s"' % password, cwd=BOOTLOADER_DIR, shell=True)
    else:
        status = subprocess.call('make')
    # return True if build was successful
    return status == 0

def clean():
    subprocess.call('make clean', cwd=BOOTLOADER_DIR, shell=True)
    # Remove 'secret_build_output.txt' if it exists
    [os.remove(f) if os.path.exists(f) else None for f in ['secret_build_output.txt']]

def write_fuse_file(fuse_name, fuse_value):
    """
    Write fuses to the proper file and format as IntelHex.
    """
    hex_file = IntelHex()
    hex_file[0] = fuse_value

    with open(os.path.join(BOOTLOADER_DIR, fuse_name + '.hex'), 'wb+') as outfile:
        hex_file.tofile(outfile, format='hex')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Bootloader Build Tool')
    parser.add_argument('clean', help='Clean output files', nargs='?', type=bool, default=False)
    args = parser.parse_args()

    if args.clean == True:
        clean()
    else:
        random_password = generate_readback_password()
        if not make(password=random_password):
            print "ERROR: Failed to compile bootloader."
            sys.exit(1)
        write_fuse_file('lfuse', 0xff)
        write_fuse_file('hfuse', 0x18)
        write_fuse_file('efuse', 0xfc)
