#!/usr/bin/env python

"""
Bootloader Build Tool

This tool is responsible for building the bootloader from source and
copying the build outputs into the host tools directory for programming.
"""
import os
import sys
import shutil
import subprocess
import argparse
from Crypto import Random
from intelhex import IntelHex

BOOTLOADER_DIR = os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..', 'bootloader'))

def generate_readback_password():
    """
    Generate secret password for readback tool and store to secret file.
    """
    pw = Random.new().read(32).encode('hex')

    # Write password to secret file
    with open('secret_build_output.txt', 'wb+') as secret_build_output:
        secret_build_output.write(pw)
    return pw

def make(password=None):
    """
    Build the bootloader from source.
    """
    if password is not None:
        status = subprocess.call('make PASSWORD="%s"' % password, cwd=BOOTLOADER_DIR, shell=True)
    else:
        status = subprocess.call('make')
    return (status == 0)  # Return True if build was successful

def clean():
    subprocess.call('make clean', cwd=BOOTLOADER_DIR, shell=True)
    [os.remove(f) if os.path.exists(f) else None for f in ['secret_build_output.txt']]

def write_fuse_file(fuse_name, fuse_value):
    hex_file = IntelHex()
    hex_file[0] = fuse_value

    with open(os.path.join(BOOTLOADER_DIR, fuse_name + '.hex'), 'wb+') as outfile:
        hex_file.tofile(outfile, format='hex')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Bootloader Build Tool')
    parser.add_argument('clean', help='Clean output files', nargs='?', type=bool, default=False)
    args = parser.parse_args()

    if args.clean == True:
        clean()
    else:
        password = generate_readback_password()
        if not make(password=password):
            print "ERROR: Failed to compile bootloader."
            sys.exit(1)
        write_fuse_file('lfuse', 0xFF)
        write_fuse_file('hfuse', 0x18)
        write_fuse_file('efuse', 0xFC)
