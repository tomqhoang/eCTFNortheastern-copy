#!/usr/bin/env python
"""
Firmware Updater Tool

A frame consists of two sections:
1. Two bytes for the length of the data section
2. A data section of length defined in the length section

[ 0x02 ]  [ variable ]
--------------------
| Length | Data... |
--------------------

In our case, the data is from one line of the Intel Hex formated .hex file

We write a frame to the bootloader, then wait for it to respond with an
OK message so we can write the next frame. The OK message in this case is
just a zero
"""

import argparse
import binascii
import json
import serial
import struct
import sys
import time
import zlib

from cStringIO import StringIO
from intelhex import IntelHex

# Define the 'OK' response message as 0x00
RESP_OK = b'\x00'
RESP_ERROR = b'\x01'

class Firmware(object):
    """
    Helper for making frames.
    """

    BLOCK_SIZE = 16

    def __init__(self, fw_filename):
        with open(fw_filename, 'rb') as fw_file:
            data = fw_file.read()
            data = zlib.decompress(data)
            data = json.loads(data)
            self.version = data['version']
            self.version_hash = data['version_hash']
            self.size = data['firmware_size']
            #self.size = 3600
            self.hex_data = StringIO(data['hex_data'])
            self.tags = data['tags']
            import pdb; pdb.set_trace()
        self.reader = IntelHex(self.hex_data)

    def frames(self):
        # The address is not sent, so we currently only support a single segment
        # starting at address 0.
        if len(self.reader.segments()) > 1:
            raise RuntimeError("ERROR: Hex file contains multiple segments.")

        for segment_start, segment_end in self.reader.segments():

           # if segment_start != 0:
           #     import pdb; pdb.set_trace()
           #     raise RuntimeError("ERROR: Segment in Hex file does not start at address 0.")

            # Construct frame from data and length.
            for address in range(segment_start, segment_end, self.BLOCK_SIZE):

                # Frame should be BLOCK_SIZE unless it is the last frame.
                if address + self.BLOCK_SIZE <= segment_end:
                    data = self.reader.tobinstr(start=address,
                                                size=self.BLOCK_SIZE)
                else:
                    data = self.reader.tobinstr(start=address,
                                                size=segment_end - address)
                # Get length of frame.
                length = len(data)
                frame_fmt = '>H{}s'.format(length)

                # Construct frame.
                yield struct.pack(frame_fmt, length, data)

    def close(self):
        self.reader.close()

def response(resp):
    if resp != RESP_OK:
        raise RuntimeError("ERROR: Bootloader responded with {}".format(repr(resp)))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Firmware Update Tool')

    parser.add_argument("--port", help="Serial port to send update over.",
                        required=True)
    parser.add_argument("--firmware", help="Path to firmware image to load.",
                        required=True)
    parser.add_argument("--debug", help="Enable debugging messages.",
                        action='store_true')
    args = parser.parse_args()

    # Open serial port. Set baudrate to 115200. Set timeout to 2 seconds.
    print('Opening serial port...')
    ser = serial.Serial(args.port, baudrate=115200, timeout=10)
    # Open our firmware file.
    print('Opening firmware file...')
    firmware = Firmware(args.firmware)
    print('Version: {}'.format(firmware.version))
    print('Size: {} bytes (not including release message)'.format(firmware.size))

    import pdb; pdb.set_trace()

    print firmware.version_hash
    print('Waiting for bootloader to enter update mode...')
    while ser.read(1) != 'U':
        pass

    # Send size and version to bootloader.
    metadata = struct.pack('>HH', firmware.version, firmware.size)
    if args.debug:
        print(metadata.encode('hex'))
    ser.write(metadata)
    
    page_num = 0
    frame_number = 0
    # Wait for an OK from the bootloader.
    resp = ser.read()
    time.sleep(0.1)
    response(resp)
    print 'Received OK'

    # send version hash
    version_hash = struct.pack('>32s',binascii.unhexlify((firmware.version_hash)))
    ser.write(version_hash)

    resp = ser.read()
    if resp == RESP_ERROR:
        print 'Illegal version'
        sys.exit()
    else:
        response(resp)

    for idx, frame in enumerate(firmware.frames()):
        if args.debug:
            print("Writing frame {} ({} bytes)...".format(idx, len(frame)))
        
        ser.write(frame)  # Write the frame...

        if args.debug:
            print(frame.encode('hex'))

        resp = ser.read()  # Wait for an OK from the bootloader

        time.sleep(0.1)

        response(resp)

        if args.debug:
            print("Resp: {}".format(ord(resp)))
        if frame_number == 15:
            try:
                stuff = struct.pack('>32s', binascii.unhexlify((firmware.tags[page_num])))
            except:
                import pdb; pdb.set_trace()
            ser.write(stuff)
            frame_number = 0
            page_num += 1
            resp = ser.read()
            time.sleep(0.1)
            response(resp)
        else:
            frame_number += 1

 
    print("Done writing firmware.")

    # Send a zero length payload to tell the bootlader to finish writing
    # its page.
    ser.write(struct.pack('>H', 0x0000))
    resp = ser.read()
    time.sleep(0.1)

    if resp == 'D':
        print 'Received confirmation'
